from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field

# Define response models for better API documentation
class ContextDocument(BaseModel):
    """Model representing a context document retrieved from the vector store."""
    id: str = Field(..., example="doc123", description="Unique identifier for the document")
    text: str = Field(..., example="Stocks represent ownership in a company, while bonds are debt instruments.", 
                     description="The text content of the document")
    metadata: Dict[str, Any] = Field(..., example={"source": "investopedia.com", "category": "investments"}, 
                                    description="Metadata associated with the document")
    score: float = Field(..., example=0.89, description="Relevance score of the document")

class ChatResponse(BaseModel):
    """Model representing the response from the chat endpoint."""
    question: str = Field(..., example="What is the difference between stocks and bonds?", 
                         description="The original question asked by the user")
    answer: str = Field(..., example="Based on the context [1], stocks represent ownership in a company, while bonds are debt instruments. When you buy stocks, you become a partial owner of the company, whereas when you buy bonds, you are essentially lending money to the issuer.", 
                       description="The answer generated by the LLM")
    model: str = Field(..., example="gpt-4", description="The LLM model used to generate the answer")
    conversation_id: str = Field(..., example="550e8400-e29b-41d4-a716-446655440000", 
                                description="Unique identifier for the conversation")
    context: List[ContextDocument] = Field(..., description="List of context documents used to generate the answer")
    processing_time: float = Field(..., example=0.85, description="Time taken to process the request in seconds")
    retrieval_profile: str = Field(..., example="balanced", description="The retrieval profile used for this request")

class ChatMessage(BaseModel):
    """Model representing a chat message in the history."""
    sender: str = Field(..., example="user", description="The sender of the message (user or bot)")
    message: str = Field(..., example="What is the difference between stocks and bonds?", 
                        description="The content of the message")
    conversation_id: str = Field(..., example="550e8400-e29b-41d4-a716-446655440000", 
                                description="Unique identifier for the conversation")
    timestamp: str = Field(..., example="2023-06-15T14:30:45.123Z", 
                          description="Timestamp when the message was sent")
    retrieval_profile: Optional[str] = Field(None, example="balanced", 
                                           description="The retrieval profile used (for bot messages)")
    model: Optional[str] = Field(None, example="gpt-4", description="The LLM model used (for bot messages)")

class ProfileInfo(BaseModel):
    """Model representing information about a retrieval profile."""
    name: str = Field(..., example="Balanced", description="Display name of the profile")
    description: str = Field(..., example="Balanced performance and quality (< 1s response time)", 
                            description="Description of the profile's characteristics")

class RetrievalProfilesResponse(BaseModel):
    """Model representing the response from the profiles endpoint."""
    profiles: Dict[str, ProfileInfo] = Field(
        ..., 
        description="Available retrieval profiles",
        example={
            "fast": {
                "name": "Fast",
                "description": "Optimized for speed (< 0.1s response time)"
            },
            "balanced": {
                "name": "Balanced",
                "description": "Balanced performance and quality (< 1s response time)"
            },
            "accurate": {
                "name": "Accurate",
                "description": "Optimized for accuracy (< 2s response time)"
            }
        }
    )
    default_profile: str = Field(..., example="balanced", description="The default retrieval profile")

class DeleteResponse(BaseModel):
    """Model representing the response from the delete endpoint."""
    message: str = Field(..., example="Chat history deleted successfully", 
                        description="Status message about the deletion")